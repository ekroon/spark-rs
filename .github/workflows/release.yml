name: release
on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'tag to release'
        required: true
  push:
    tags:
      - 'v*'

jobs:
  get-version:
    name: get-version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ env.VERSION }}
      tag: ${{ env.TAG }}
    steps:
      - name: Get version
        shell: bash
        id: get_version
        run: |
          INPUT_TAG=${{ github.event.inputs.tag }}
          if [ -z "$INPUT_TAG" ]; then
            INPUT_TAG=${GITHUB_REF#refs/tags/}
          else
            INPUT_VERSION=${INPUT_TAG#v}
          fi
          if [ -z "$INPUT_VERSION" ]; then
                INPUT_VERSION=${INPUT_TAG#refs/tags/}
          fi
          echo "INPUT_TAG=$INPUT_TAG"
          echo "INPUT_VERSION=$INPUT_VERSION"
          echo "TAG=${INPUT_TAG}" >> $GITHUB_ENV
          echo "VERSION=${INPUT_VERSION}" >> $GITHUB_ENV

  build-release:
    name: build-release
    needs: ["get-version"]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        build: [linux, macos, windows]
        include:
          - build: linux
            os: ubuntu-latest
          - build: macos
            os: macos-latest
          - build: windows
            os: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: ${{ needs.get-version.outputs.tag }}
      - name: install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true
      - uses: Swatinem/rust-cache@v2
      - name: Build
        run: cargo build --release
      - name: Build archive
        shell: bash
        run: |
          export_dir="spark-${{ needs.get-version.outputs.version }}-${{ matrix.build }}"
          mkdir $export_dir
          if [ "${{ matrix.build }}" = "windows" ]; then
            cp "target/release/spark.exe" "$export_dir/"
            7z a "$export_dir.zip" "$export_dir"
            echo "ASSET=$export_dir.zip" >> $GITHUB_ENV
          else
            cp "target/release/spark" "$export_dir/"
            tar czf "$export_dir.tar.gz" "$export_dir"
            echo "ASSET=$export_dir.tar.gz" >> $GITHUB_ENV
          fi
      - name: Upload release archive
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release upload ${{ needs.get-version.outputs.tag }} $ASSET
